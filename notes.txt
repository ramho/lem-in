┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
      NOTES
└╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘

* parsing
  -check if start
  -check if end
  -check if connexion between start/end ?

*first rooms then links
  -if rooms after links, invalid

*no file passed to binary

*get rooms
  -linked list
  -hash map

*how to get links ?
  -linked list

*node
  -if start/end/*
    +if start/end, check number of in/output
      to have number of times to go through bhandari
  -name
  -coord x/y
  -links
  -cost/weight (1)

*adjacency matrix or  adjacency list

* ERREUR when two links the same



┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
      SOURCES
└╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘

- hashmap --> http://www.kaushikbaruah.com/posts/data-structure-in-c-hashmap/
- shitty hash function for *char https://stackoverflow.com/questions/7666509/hash-function-for-string
┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
        CODE
└╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘

int main() // basic test for hash
{
  t_lemin lemin;
  t_node node;

  node.name = 'A';
  node.x = 2;
  node.y = 3;

  create_table(1, &lemin);
  insert_node_in_table(&lemin, node.name, &node);
  printf("Name is %d\n", lookup(&lemin, node.name));
  return(0);
}


int i;
for ( i = 0; i < lemin.table_size; i++)
    printf("line is [%s]\n", lemin.file[i]);


int i;

for (i = 0; i < lemin.number_of_nodes; i++)
  printf("name [%s] type [%d] x[%d] y[%d] infinity[%d]\n", lemin.node_tab[i]->name, lemin.node_tab[i]->type, lemin.node_tab[i]->x, lemin.node_tab[i]->y,lemin.node_tab[i]->infinity);
for (i = 0; i < lemin.number_of_edges; i++)
  printf("predecessor [%s] successor [%s] weight [%d]\n", lemin.edge_tab[i]->predecessor,lemin.edge_tab[i]->successor, lemin.edge_tab[i]->weight);


  void shortest_path(t_lemin *lemin)
  {
  	int i;

  	i = 0;
  	while (i < lemin->number_of_nodes)
  	{
  		if (lemin->node_tab[i]->infinity == 1)
  			ft_printf("%5s | %11s | infinity\n", lemin->node_tab[i]->name, lemin->node_tab[i]->predecessor);
  		else
  			ft_printf("%5s | %11s | %5d\n", lemin->node_tab[i]->name, lemin->node_tab[i]->predecessor, lemin->node_tab[i]->reach_cost);
  		i++;
  	}
  }


...(╯°□°）╯︵ ┻┻
